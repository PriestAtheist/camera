[{"E:\\github\\camera\\src\\index.js":"1","E:\\github\\camera\\src\\App.js":"2","E:\\github\\camera\\src\\pages\\Room\\index.js":"3","E:\\github\\camera\\src\\pages\\Main\\index.js":"4","E:\\github\\camera\\src\\pages\\NotFound404\\index.js":"5","E:\\github\\camera\\src\\socket\\actions.js":"6","E:\\github\\camera\\src\\hooks\\useWebRTC.js":"7","E:\\github\\camera\\src\\socket\\index.js":"8","E:\\github\\camera\\src\\hooks\\useStateWithCallback.js":"9"},{"size":254,"mtime":1696947542362,"results":"10","hashOfConfig":"11"},{"size":492,"mtime":1697038228027,"results":"12","hashOfConfig":"11"},{"size":1561,"mtime":1696963212593,"results":"13","hashOfConfig":"11"},{"size":973,"mtime":1697038282237,"results":"14","hashOfConfig":"11"},{"size":118,"mtime":1696947806407,"results":"15","hashOfConfig":"11"},{"size":332,"mtime":1696970341251,"results":"16","hashOfConfig":"11"},{"size":5396,"mtime":1697021965056,"results":"17","hashOfConfig":"11"},{"size":285,"mtime":1697038237657,"results":"18","hashOfConfig":"11"},{"size":582,"mtime":1696970623768,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qamd2z",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\github\\camera\\src\\index.js",[],[],"E:\\github\\camera\\src\\App.js",[],[],"E:\\github\\camera\\src\\pages\\Room\\index.js",[],[],"E:\\github\\camera\\src\\pages\\Main\\index.js",[],[],"E:\\github\\camera\\src\\pages\\NotFound404\\index.js",[],[],"E:\\github\\camera\\src\\socket\\actions.js",[],[],"E:\\github\\camera\\src\\hooks\\useWebRTC.js",["48","49","50","51","52"],[],"import {useEffect, useRef, useCallback} from 'react';\r\nimport freeice from 'freeice';\r\nimport useStateWithCallback from './useStateWithCallback';\r\nimport socket from '../socket';\r\nimport ACTIONS from '../socket/actions';\r\n\r\nexport const LOCAL_VIDEO = 'LOCAL_VIDEO';\r\n\r\n\r\nexport default function useWebRTC(roomID) {\r\n  const [clients, updateClients] = useStateWithCallback([]);\r\n\r\n  const addNewClient = useCallback((newClient, cb) => {\r\n    updateClients(list => {\r\n      if (!list.includes(newClient)) {\r\n        return [...list, newClient]\r\n      }\r\n\r\n      return list;\r\n    }, cb);\r\n  }, [clients, updateClients]);\r\n\r\n  const peerConnections = useRef({});\r\n  const localMediaStream = useRef(null);\r\n  const peerMediaElements = useRef({\r\n    [LOCAL_VIDEO]: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function handleNewPeer({peerID, createOffer}) {\r\n      if (peerID in peerConnections.current) {\r\n        return console.warn(`Already connected to peer ${peerID}`);\r\n      }\r\n\r\n      peerConnections.current[peerID] = new RTCPeerConnection({\r\n        iceServers: freeice(),\r\n      });\r\n\r\n      peerConnections.current[peerID].onicecandidate = event => {\r\n        if (event.candidate) {\r\n          socket.emit(ACTIONS.RELAY_ICE, {\r\n            peerID,\r\n            iceCandidate: event.candidate,\r\n          });\r\n        }\r\n      }\r\n\r\n      let tracksNumber = 0;\r\n      peerConnections.current[peerID].ontrack = ({streams: [remoteStream]}) => {\r\n        tracksNumber++\r\n\r\n        if (tracksNumber === 2) { // video & audio tracks received\r\n          tracksNumber = 0;\r\n          addNewClient(peerID, () => {\r\n            if (peerMediaElements.current[peerID]) {\r\n              peerMediaElements.current[peerID].srcObject = remoteStream;\r\n            } else {\r\n              // FIX LONG RENDER IN CASE OF MANY CLIENTS\r\n              let settled = false;\r\n              const interval = setInterval(() => {\r\n                if (peerMediaElements.current[peerID]) {\r\n                  peerMediaElements.current[peerID].srcObject = remoteStream;\r\n                  settled = true;\r\n                }\r\n\r\n                if (settled) {\r\n                  clearInterval(interval);\r\n                }\r\n              }, 1000);\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      localMediaStream.current.getTracks().forEach(track => {\r\n        peerConnections.current[peerID].addTrack(track, localMediaStream.current);\r\n      });\r\n\r\n      if (createOffer) {\r\n        const offer = await peerConnections.current[peerID].createOffer();\r\n\r\n        await peerConnections.current[peerID].setLocalDescription(offer);\r\n\r\n        socket.emit(ACTIONS.RELAY_SDP, {\r\n          peerID,\r\n          sessionDescription: offer,\r\n        });\r\n      }\r\n    }\r\n\r\n    socket.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n\r\n    return () => {\r\n      socket.off(ACTIONS.ADD_PEER);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function setRemoteMedia({peerID, sessionDescription: remoteDescription}) {\r\n      await peerConnections.current[peerID]?.setRemoteDescription(\r\n        new RTCSessionDescription(remoteDescription)\r\n      );\r\n\r\n      if (remoteDescription.type === 'offer') {\r\n        const answer = await peerConnections.current[peerID].createAnswer();\r\n\r\n        await peerConnections.current[peerID].setLocalDescription(answer);\r\n\r\n        socket.emit(ACTIONS.RELAY_SDP, {\r\n          peerID,\r\n          sessionDescription: answer,\r\n        });\r\n      }\r\n    }\r\n\r\n    socket.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia)\r\n\r\n    return () => {\r\n      socket.off(ACTIONS.SESSION_DESCRIPTION);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(ACTIONS.ICE_CANDIDATE, ({peerID, iceCandidate}) => {\r\n      peerConnections.current[peerID]?.addIceCandidate(\r\n        new RTCIceCandidate(iceCandidate)\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      socket.off(ACTIONS.ICE_CANDIDATE);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleRemovePeer = ({peerID}) => {\r\n      if (peerConnections.current[peerID]) {\r\n        peerConnections.current[peerID].close();\r\n      }\r\n\r\n      delete peerConnections.current[peerID];\r\n      delete peerMediaElements.current[peerID];\r\n\r\n      updateClients(list => list.filter(c => c !== peerID));\r\n    };\r\n\r\n    socket.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n\r\n    return () => {\r\n      socket.off(ACTIONS.REMOVE_PEER);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function startCapture() {\r\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: {\r\n          width: 1280,\r\n          height: 720,\r\n        }\r\n      });\r\n\r\n      addNewClient(LOCAL_VIDEO, () => {\r\n        const localVideoElement = peerMediaElements.current[LOCAL_VIDEO];\r\n\r\n        if (localVideoElement) {\r\n          localVideoElement.volume = 0;\r\n          localVideoElement.srcObject = localMediaStream.current;\r\n        }\r\n      });\r\n    }\r\n\r\n    startCapture()\r\n      .then(() => socket.emit(ACTIONS.JOIN, {room: roomID}))\r\n      .catch(e => console.error('Error getting userMedia:', e));\r\n\r\n    {/*return () => {\r\n      localMediaStream.current.getTracks().forEach(track => track.stop());\r\n\r\n      socket.emit(ACTIONS.LEAVE);\r\n    };*/}\r\n  }, [roomID]);\r\n\r\n  const provideMediaRef = useCallback((id, node) => {\r\n    peerMediaElements.current[id] = node;\r\n  }, []);\r\n\r\n  return {\r\n    clients,\r\n    provideMediaRef\r\n  };\r\n}","E:\\github\\camera\\src\\socket\\index.js",[],[],"E:\\github\\camera\\src\\hooks\\useStateWithCallback.js",[],[],{"ruleId":"53","severity":1,"message":"54","line":21,"column":6,"nodeType":"55","endLine":21,"endColumn":30,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":96,"column":6,"nodeType":"55","endLine":96,"endColumn":8,"suggestions":"58"},{"ruleId":"53","severity":1,"message":"59","line":152,"column":6,"nodeType":"55","endLine":152,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":178,"column":5,"nodeType":"63","messageId":"64","endLine":182,"endColumn":10},{"ruleId":"53","severity":1,"message":"57","line":183,"column":6,"nodeType":"55","endLine":183,"endColumn":14,"suggestions":"65"},"react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'clients'. Either exclude it or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'addNewClient'. Either include it or remove the dependency array.",["67"],"React Hook useEffect has a missing dependency: 'updateClients'. Either include it or remove the dependency array.",["68"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"70","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [updateClients]",{"range":"77","text":"78"},"Update the dependencies array to be: [addNewClient]",{"range":"79","text":"80"},{"range":"81","text":"78"},"Update the dependencies array to be: [addNewClient, roomID]",{"range":"82","text":"83"},[592,616],"[updateClients]",[2866,2868],"[addNewClient]",[4368,4370],[5217,5225],"[addNewClient, roomID]"]